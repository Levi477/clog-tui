name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build for ${{ matrix.os }} (${{ matrix.arch }})
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        include:
          # Linux builds
          - os: linux
            arch: x86_64
            runner: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: linux
            arch: aarch64
            runner: ubuntu-latest
            target: aarch64-unknown-linux-gnu
          
          # Windows builds
          - os: windows
            arch: x86_64
            runner: windows-latest
            target: x86_64-pc-windows-msvc
          - os: windows
            arch: aarch64
            runner: windows-latest
            target: aarch64-pc-windows-msvc
          
          # macOS builds
          - os: macos
            arch: x86_64
            runner: macos-latest
            target: x86_64-apple-darwin
          - os: macos
            arch: aarch64
            runner: macos-latest
            target: aarch64-apple-darwin

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Install cross-compilation tools (Linux ARM64)
      if: matrix.os == 'linux' && matrix.arch == 'aarch64'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-aarch64-linux-gnu
        echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Build binary
      run: cargo build --release --target ${{ matrix.target }}

    - name: Prepare binary (Unix)
      if: matrix.os != 'windows'
      run: |
        # Get the binary name from Cargo.toml
        BINARY_NAME=$(cargo metadata --format-version 1 --no-deps | jq -r '.packages[0].name')
        mkdir -p dist
        cp target/${{ matrix.target }}/release/$BINARY_NAME dist/
        cd dist
        tar -czf ${BINARY_NAME}-${{ matrix.os }}-${{ matrix.arch }}.tar.gz $BINARY_NAME

    - name: Prepare binary (Windows)
      if: matrix.os == 'windows'
      run: |
        # Get the binary name from Cargo.toml
        $BINARY_NAME = (cargo metadata --format-version 1 --no-deps | ConvertFrom-Json).packages[0].name
        New-Item -ItemType Directory -Force -Path dist
        Copy-Item "target/${{ matrix.target }}/release/$BINARY_NAME.exe" -Destination "dist/"
        cd dist
        Compress-Archive -Path "$BINARY_NAME.exe" -DestinationPath "$BINARY_NAME-${{ matrix.os }}-${{ matrix.arch }}.zip"

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.os }}-${{ matrix.arch }}-binary
        path: |
          dist/*.tar.gz
          dist/*.zip

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Prepare release assets
      run: |
        mkdir -p release-assets
        find artifacts -name "*.tar.gz" -o -name "*.zip" | while read file; do
          cp "$file" release-assets/
        done
        ls -la release-assets/

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        files: release-assets/*
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
